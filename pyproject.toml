[build-system]
requires = ["hatchling>=1.26.1"]
build-backend = "hatchling.build"

[tool.hatch.build.targets.wheel]
packages = ["src"]

[project]
name = "tourguide"
version = "2.2.10"
description = "Generate states based on neuron topology"
readme = "README.md"
requires-python = ">=3.12"
dependencies = [
    "dash>=3.0.0,<3.0.3",
    "cachetools>=5.5.0",
    "caveclient>=7.7.3",
    "cloud-volume>=11.1.3",
    "cryptography>=44.0.0",
    "dash-mantine-components>=1.2.0",
    "flask>=3.0.0",
    "meshparty>=2.0.1",
    "middle-auth-client>=3.18.1",
    "nglui>=3.8.0",
    "numpy>=2.2.3",
    "orjson>=3.10.14",
    "pandas>=2.2.3",
    "pcg-skel>=1.2.2",
    "scipy>=1.13.1",
    "loguru>=0.7.3",
    "werkzeug>=3.0.6",
    "flask-caching>=2.3.1",
    "gunicorn>=23.0.0",
    "prometheus-client>=0.21.1",
]
authors = [
    { name = "Casey Schneider-Mizell", email = "caseys@alleninstitute.org" },
]

classifiers = [
    "License :: OSI Approved :: MIT License",
]

[dependency-groups]
dev = [
    "pytest",
    "pytest-cov",
    "ipykernel",
    "bump-my-version",
]
profile = [
    "scalene",
    "pyinstrument",
]
docs = [
    "mkdocs",
    "mkdocs-material",
    "mkdocstrings[python]",
]
lint = [
    "ruff"
]

[tool.uv]
default-groups = ["dev", "docs", "lint", "profile"]

[tool.bumpversion]
current_version = "2.2.10"
parse = "(?P<major>\\d+)\\.(?P<minor>\\d+)\\.(?P<patch>\\d+)"
serialize = ["{major}.{minor}.{patch}"]
regex = false
ignore_missing_version = false
tag = true
sign_tags = false
tag_name = "v{new_version}"
tag_message = "Bump version: {current_version} â†’ {new_version}"
allow_dirty = false
commit = true
message = "v{new_version}"
commit_args = ""
pre_commit_hooks = ['uv sync', 'git add uv.lock']
post_commit_hooks = ["./.bmv-post-commit.sh"]

[[tool.bumpversion.files]]
filename = "tourguide/flask_app/api.py"
search = "__version__ = \"{current_version}\""
replace = "__version__ = \"{new_version}\""

[[tool.bumpversion.files]]
filename = "pyproject.toml"
search = "version = \"{current_version}\""
replace = "version = \"{new_version}\""

[tool.ruff]
extend-exclude = ["*.ipynb"]

[tool.ruff.lint]
select=["E9","F63","F7","F82"]

[tool.poe.tasks.drybump]
cmd = "uv run bump-my-version bump --dry-run --verbose"
help = "Dry run of version bump for the project. Use with 'patch', 'minor', or 'major' to specify the version change."

[tool.poe.tasks.bump]
cmd = "uv run bump-my-version bump"
help = "Bump the version number in the project. Use with 'patch', 'minor', or 'major' to specify the version change."

[tool.poe.tasks.test]
cmd = "uv run pytest --cov=tourguide tests"
help = "Run pytest with code coverage."

[tool.poe.tasks.doc-preview]
cmd = "uv run mkdocs serve"
help = "Preview documentation build locally"

[tool.poe.tasks.profile]
cmd = "uv run scalene"
help = "Profile the project with scalene"

[tool.poe.tasks.profile-lite]
cmd = "uv run scalene --cli --reduced-profile"
help = "Profile the project with scalene in reduced and inline mode"

